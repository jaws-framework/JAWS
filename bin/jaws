#!/usr/bin/env node

var commop = require ('commop');
var config = require ('./jaws_command_options.json');

var launcher = new commop (config);

var JawsError = require('../lib/jaws-error'),
    Jaws = require('../lib/index.js'),
    JawsCLI = require('../lib/utils/cli.js'),
    program = require('commander'),
    utils = require('../lib/utils'),
    Promise = require('bluebird'),
    rawDebug = require('debug'),
    execute = utils.execute;

var JAWS = new Jaws();

cmd = launcher.findCommand (process.argv);

/**
* task function
* @param {Object}   cmd  command object
* @param {Object}   data shared object between tasks in current handler
* @param {Function} next call next if done
*/
exports.createProject = function (cmd, data, next) {
  var name = cmd.options.name || cmd.positional[0];
  var options = cmd.options;
  console.log(options);
    var theCmd = require('../lib/commands/project_new');
      execute(theCmd.run(
            name,
            options.stage ? options.stage.toLowerCase() : null,
            options.region,
            options.domain,
            options.email,
            options['aws-profile'],
            options['dont-exe-cf']
      ));
}

exports.createRegion = function (cmd) {
  var options = cmd.options;
    var theCmd = require('../lib/commands/new_stage_region');
    execute(theCmd.run(
        JAWS,
        'region',
        options.stage,
        options.region,
        options['dont-exe-cf']
    ));
}

exports.createStage = function (cmd) {
  var theCmd = require('../lib/commands/new_stage_region');
  execute(theCmd.run(
    JAWS,
    'stage',
    options.stage,
    options.region,
        options['dont-exe-cf']
  ));
}

exports.run = function (cmd) {
  var runner = require('../lib/commands/run');
     execute(runner.run(JAWS));
}
exports.createLambda = function(cmd){
  var modType = 'lambda';
  if (cmd.options.endpoint) {
    modType = 'both'
  }
   var name = cmd.options.name || cmd.positional[0];
  if (!name) {
    console.log('What would you like me to call it?');
    process.exit(1);
  }
  var action = cmd.options.action || cmd.positional[1];
  if (!action) {
    console.log('I need a surname too. It could be something like get, list, post, create - something active!');
    process.exit(1);
  }
  createAPILambda(modType, cmd);
}

exports.createEndpoint = function(cmd) {
  createAPILambda('endpoint', cmd);
}

function createAPILambda (modType, cmd) {
  var theCmd = require('../lib/commands/module_create');
  var name = cmd.options.name || cmd.positional[0];
  var action = cmd.options.action || cmd.positional[1];
  var pkgMgr = cmd.options['package-manager'];
  var runtime = cmd.options.runtime || 'nodejs';
  var template = cmd.options.template;

    execute(
      theCmd.run(
        JAWS, 
        name, 
        action, 
        runtime, 
        pkgMgr, 
        modType,
        template));
}

exports.tagLambdas = function (cmd) {
  tagAllTheThings('lambda', cmd);
}

exports.tagEndpoints = function (cmd) {
  tagAllTheThings('endpoint', cmd);
}

exports.tagAllTheThings = function(type, cmd) {
  var CmdTag = require('../lib/commands/tag');
  if (options['list-all']) {
    execute(CmdTag.listAll(JAWS, type).then(function(relPaths) {
        console.log(relPaths);
  }));
  } else if (options['tag-all'] || options['untag-all']) {
    var untag = (cmd.options['untag-all']) ? true : false;
    execute(CmdTag.tagAll(JAWS, type, untag));
  } else {
  // If not tagging all, you have to be tagging whats in your CWD (null 1st param)
  execute(CmdTag.tag(type, null, cmd.options.untag));
  }
}

exports.deployLambda = function(cmd){
    var allTagged = (cmd.options.tagged) ? true : false;
    var theCmd = require('../lib/commands/deploy_lambda');
  execute(theCmd.run(JAWS, cmd.options.stage, cmd.options.region, allTagged, cmd.options['dont-exe-cf']));
}

exports.deployEndpoint = function(cmd){
  var allTagged = (cmd.options.tagged) ? true : false;
  var theCmd = require('../lib/commands/deploy_endpoint');
  execute(theCmd.run(JAWS, cmd.options.stage, cmd.options.region, allTagged));
}

exports.deployResources = function(cmd){
  var theCmd = require('../lib/commands/deploy_resources');
  execute(theCmd.run(JAWS, cmd.options.stage, cmd.options.region));
}

exports.listEnv = function(cmd){
  var CmdEnv = require('../lib/commands/env');
    execute(CmdEnv.listEnv(JAWS, cmd.options.stage, cmd.options.region, true));
}

exports.getEnv = function(cmd){
  var CmdEnv = require('../lib/commands/env');
  key = cmd.positional[0];
  if (!key) {
    console.error('Which environment value were you after then?');
    process.exit(1);
  }
  execute(CmdEnv.getEnvKey(JAWS, cmd.options.stage, cmd.options.region, key));
}

exports.setEnv = function(cmd){
  var CmdEnv = require('../lib/commands/env');
  if (cmd.positional.length !== 2)
  {
    console.error("I'll need a key and a value. Example: jaws env set TABLE_NAME users --stage prod --region us-east-1");
    process.exit(1);    
  }

  key = cmd.positional[0];
  value = cmd.positional[1];

  execute(CmdEnv.setEnvKey(JAWS, cmd.options.stage, cmd.options.region, key, val));
}

exports.unsetEnv = function(cmd) {
  var CmdEnv = require('../lib/commands/env');
  if (cmd.positional.length !== 1)
  {
    console.error("I'll need a key, and just one. Example: jaws env unset TABLE_NAME --stage prod --region us-east-1");
    process.exit(1);    
  }
  
  key = cmd.positional[0];

  execute(CmdEnv.setEnvKey(JAWS, cmd.options.stage, cmd.options.region, key));

}

exports.dash = function(cmd){
    var CmdDash = require('../lib/commands/dash');
    execute(CmdDash.run(JAWS));
}

exports.postInstall = function(cmd){
  var module = cmd.positional[0];
  var CmdPostInstall = require('../lib/commands/postinstall');
  execute(CmdPostInstall.run(JAWS, module, cmd.options['package-manager']));
}

launcher.start ();
